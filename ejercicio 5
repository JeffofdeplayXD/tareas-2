ejericicio 5 
#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>

class CityDistances {
private:
    std::vector<std::vector<int>> distances;

public:
    CityDistances(const std::vector<std::vector<int>>& distances) : distances(distances) {}

    void enterDistances() {
        for (auto& row : distances) {
            for (int& distance : row) {
                std::cin >> distance;
            }
        }
    }

    std::vector<int> sortCitiesByTotalDistance() {
        std::vector<int> totalDistances(distances.size(), 0);
        for (int i = 0; i < distances.size(); ++i) {
            totalDistances[i] = std::accumulate(distances[i].begin(), distances[i].end(), 0);
        }
        std::vector<int> cityIndices(distances.size());
        std::iota(cityIndices.begin(), cityIndices.end(), 0);
        std::sort(cityIndices.begin(), cityIndices.end(), & {
            return totalDistances[a] < totalDistances[b];
        });
        return cityIndices;
    }

    int findMinDistance(int city1, int city2) {
        return std::min(distances[city1][city2], distances[city2][city1]);
    }

    void printDistancesAndSortedCities() {
        for (const auto& row : distances) {
            for (int distance : row) {
                std::cout << distance << ' ';
            }
            std::cout << '\n';
        }
        std::vector<int> sortedCities = sortCitiesByTotalDistance();
        std::cout << "Ciudades ordenadas por distancia total: ";
        for (int city : sortedCities) {
            std::cout << city + 1 << ' ';
        }
        std::cout << '\n';
    }
};
